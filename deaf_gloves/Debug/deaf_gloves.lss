
deaf_gloves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000182  00800060  00000aca  00000b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008001e2  008001e2  00000ce0  2**0
                  ALLOC
  3 .stab         00001f2c  00000000  00000000  00000ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014be  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3e       	cpi	r26, 0xE2	; 226
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a2 ee       	ldi	r26, 0xE2	; 226
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3f       	cpi	r26, 0xF6	; 246
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d6 02 	call	0x5ac	; 0x5ac <main>
  8a:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MUART_voidInit>:
void MUART_voidInit(void)
{
	u16 local_u16BaudRate = BAUD_RATE_EQUATION;

	// Set Baudrate
	UBRRL = (u8) local_u16BaudRate;
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
	UBRRH = (u8) (local_u16BaudRate >> 8);
  96:	10 bc       	out	0x20, r1	; 32

	// Character Size 8-bit
	CLR_BIT(UCSRB,2);
  98:	52 98       	cbi	0x0a, 2	; 10

	// Character Size 8-bit
	// Mode Asynchronous operation
	// Parity Disabled
	// 1 Stop Bit
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32

	// Enable Receiver
	// Enable Transmitter
	SET_BIT(UCSRB,3);
  9e:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,4);
  a0:	54 9a       	sbi	0x0a, 4	; 10

}
  a2:	08 95       	ret

000000a4 <MUART_voidSendByteSyncBlocking>:


void MUART_voidSendByteSyncBlocking (u8 A_u8DataByte)
{
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0);//0=not empty
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <MUART_voidSendByteSyncBlocking>

	// Set Data into Tx Register and start Transmission
	UDR = A_u8DataByte;
  a8:	8c b9       	out	0x0c, r24	; 12

	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0);
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <MUART_voidSendByteSyncBlocking+0x6>

	// Clear transmit Interrupt flag
	SET_BIT(UCSRA,6);
  ae:	5e 9a       	sbi	0x0b, 6	; 11

}
  b0:	08 95       	ret

000000b2 <MUART_voidSendStringSyncBlocking>:

void MUART_voidSendStringSyncBlocking (u8 *A_pu8String)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	ec 01       	movw	r28, r24
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <MUART_voidSendStringSyncBlocking+0xe>
	while (*A_pu8String > 0)
	{
		MUART_voidSendByteSyncBlocking(*A_pu8String++);
  ba:	21 96       	adiw	r28, 0x01	; 1
  bc:	0e 94 52 00 	call	0xa4	; 0xa4 <MUART_voidSendByteSyncBlocking>

}

void MUART_voidSendStringSyncBlocking (u8 *A_pu8String)
{
	while (*A_pu8String > 0)
  c0:	88 81       	ld	r24, Y
  c2:	88 23       	and	r24, r24
  c4:	d1 f7       	brne	.-12     	; 0xba <MUART_voidSendStringSyncBlocking+0x8>
	{
		MUART_voidSendByteSyncBlocking(*A_pu8String++);
	}
}
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <MUART_u8ReadByteSyncBlocking>:


u8 MUART_u8ReadByteSyncBlocking (void)
{
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0);//0=not finished
  cc:	5f 9b       	sbis	0x0b, 7	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <MUART_u8ReadByteSyncBlocking>
	return UDR;
  d0:	8c b1       	in	r24, 0x0c	; 12
}
  d2:	08 95       	ret

000000d4 <MUART_u8ReadStringSyncBlocking>:

u8* MUART_u8ReadStringSyncBlocking(void) {
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
    u8* LocalStringRead = (u8 *)malloc(sizeof(u8));
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <malloc>
  e8:	9c 01       	movw	r18, r24


u8 MUART_u8ReadByteSyncBlocking (void)
{
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0);//0=not finished
  ea:	5f 9b       	sbis	0x0b, 7	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <MUART_u8ReadStringSyncBlocking+0x16>
	return UDR;
  ee:	fc b0       	in	r15, 0x0c	; 12
  f0:	ee 24       	eor	r14, r14
  f2:	11 c0       	rjmp	.+34     	; 0x116 <MUART_u8ReadStringSyncBlocking+0x42>
    u8* LocalStringRead = (u8 *)malloc(sizeof(u8));
    u8 LocalStringLastByte = MUART_u8ReadByteSyncBlocking();
    u8 LEN = 0;

    while (LocalStringLastByte != '\n' && LocalStringLastByte !=NULL ) {  // Change the delimiter to '\n' or another appropriate value
        LocalStringRead = (u8 *)realloc(LocalStringRead, (LEN + 1) * sizeof(u8));
  f4:	0e 2d       	mov	r16, r14
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	b8 01       	movw	r22, r16
  fa:	6f 5f       	subi	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
  fe:	c9 01       	movw	r24, r18
 100:	0e 94 55 04 	call	0x8aa	; 0x8aa <realloc>
 104:	9c 01       	movw	r18, r24
        LocalStringRead[LEN] = LocalStringLastByte;
 106:	08 0f       	add	r16, r24
 108:	19 1f       	adc	r17, r25
 10a:	f8 01       	movw	r30, r16
 10c:	f0 82       	st	Z, r15


u8 MUART_u8ReadByteSyncBlocking (void)
{
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0);//0=not finished
 10e:	5f 9b       	sbis	0x0b, 7	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <MUART_u8ReadStringSyncBlocking+0x3a>
    u8 LEN = 0;

    while (LocalStringLastByte != '\n' && LocalStringLastByte !=NULL ) {  // Change the delimiter to '\n' or another appropriate value
        LocalStringRead = (u8 *)realloc(LocalStringRead, (LEN + 1) * sizeof(u8));
        LocalStringRead[LEN] = LocalStringLastByte;
        LEN++;
 112:	e3 94       	inc	r14

u8 MUART_u8ReadByteSyncBlocking (void)
{
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0);//0=not finished
	return UDR;
 114:	fc b0       	in	r15, 0x0c	; 12
u8* MUART_u8ReadStringSyncBlocking(void) {
    u8* LocalStringRead = (u8 *)malloc(sizeof(u8));
    u8 LocalStringLastByte = MUART_u8ReadByteSyncBlocking();
    u8 LEN = 0;

    while (LocalStringLastByte != '\n' && LocalStringLastByte !=NULL ) {  // Change the delimiter to '\n' or another appropriate value
 116:	fa e0       	ldi	r31, 0x0A	; 10
 118:	ff 16       	cp	r15, r31
 11a:	11 f0       	breq	.+4      	; 0x120 <MUART_u8ReadStringSyncBlocking+0x4c>
 11c:	ff 20       	and	r15, r15
 11e:	51 f7       	brne	.-44     	; 0xf4 <MUART_u8ReadStringSyncBlocking+0x20>
        LocalStringRead[LEN] = LocalStringLastByte;
        LEN++;
        LocalStringLastByte = MUART_u8ReadByteSyncBlocking();
    }

    LocalStringRead = (u8 *)realloc(LocalStringRead, (LEN + 1) * sizeof(u8));
 120:	0e 2d       	mov	r16, r14
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	b8 01       	movw	r22, r16
 126:	6f 5f       	subi	r22, 0xFF	; 255
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	c9 01       	movw	r24, r18
 12c:	0e 94 55 04 	call	0x8aa	; 0x8aa <realloc>
 130:	ec 01       	movw	r28, r24
    if (LocalStringRead == NULL) {
 132:	00 97       	sbiw	r24, 0x00	; 0
 134:	29 f4       	brne	.+10     	; 0x140 <MUART_u8ReadStringSyncBlocking+0x6c>
        free(LocalStringRead);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <free>
 13e:	04 c0       	rjmp	.+8      	; 0x148 <MUART_u8ReadStringSyncBlocking+0x74>
        return NULL;
    }

    LocalStringRead[LEN] = '\0';
 140:	08 0f       	add	r16, r24
 142:	19 1f       	adc	r17, r25
 144:	f8 01       	movw	r30, r16
 146:	10 82       	st	Z, r1
    return LocalStringRead;
    /* don't forget to free the variable that holds this function result */
}
 148:	ce 01       	movw	r24, r28
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	ff 90       	pop	r15
 154:	ef 90       	pop	r14
 156:	08 95       	ret

00000158 <MTIMER0_voidInit>:


void MTIMER0_voidInit (void)
{
	// CTC Mode
	SET_BIT(TCCR0,3);
 158:	83 b7       	in	r24, 0x33	; 51
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,6);
 15e:	83 b7       	in	r24, 0x33	; 51
 160:	8f 7b       	andi	r24, 0xBF	; 191
 162:	83 bf       	out	0x33, r24	; 51

	// Enable CTC Interrupt
	SET_BIT(TIMSK,1);
 164:	89 b7       	in	r24, 0x39	; 57
 166:	82 60       	ori	r24, 0x02	; 2
 168:	89 bf       	out	0x39, r24	; 57
	CLR_BIT(TIMSK,0);
 16a:	89 b7       	in	r24, 0x39	; 57
 16c:	8e 7f       	andi	r24, 0xFE	; 254
 16e:	89 bf       	out	0x39, r24	; 57

	// Set OCR0 Value
	OCR0 = OCR0_VALUE;
 170:	87 ec       	ldi	r24, 0xC7	; 199
 172:	8c bf       	out	0x3c, r24	; 60

	// Start Timer by setting its clock
	TCCR0 &= 0b11001000;
 174:	83 b7       	in	r24, 0x33	; 51
 176:	88 7c       	andi	r24, 0xC8	; 200
 178:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (TIMER0_CLK | (CTC_OC0_MODE <<4));
 17a:	83 b7       	in	r24, 0x33	; 51
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	83 bf       	out	0x33, r24	; 51

}
 180:	08 95       	ret

00000182 <MTIMER0_voidSetCTCCallback>:

void MTIMER0_voidSetCTCCallback (void (*A_PtrToFunc)(void))
{
	if (A_PtrToFunc != NULL)
 182:	00 97       	sbiw	r24, 0x00	; 0
 184:	21 f0       	breq	.+8      	; 0x18e <MTIMER0_voidSetCTCCallback+0xc>
	{
		TIMER0_CTC_CALLBACK = A_PtrToFunc;
 186:	90 93 e3 01 	sts	0x01E3, r25
 18a:	80 93 e2 01 	sts	0x01E2, r24
 18e:	08 95       	ret

00000190 <__vector_10>:
}


void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	if (TIMER0_CTC_CALLBACK != NULL)
 1b2:	e0 91 e2 01 	lds	r30, 0x01E2
 1b6:	f0 91 e3 01 	lds	r31, 0x01E3
 1ba:	30 97       	sbiw	r30, 0x00	; 0
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <__vector_10+0x30>
	{
		TIMER0_CTC_CALLBACK();
 1be:	09 95       	icall
	}
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <TWI_init>:
#include "TWI_config.h"

void TWI_init(void)
{
    /* Bit Rate: 400.000 kbps using (pre-scaler=1 -->TWPS=00) and F_CPU=8Mhz */
    TWBR = 0x02;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
 1e6:	11 b8       	out	0x01, r1	; 1

    /* Two Wire Bus address my address if any master device want to call me:
     * bits(7:1) 0x1 (used in case this MC is a slave device)
     * bit 0: General Call Recognition: Off
     */
    TWAR = 0b00000010; // my address = 0x01 :)
 1e8:	82 b9       	out	0x02, r24	; 2

    TWCR = (1<<TWCR_TWEN); /* enable TWI */
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	86 bf       	out	0x36, r24	; 54
}
 1ee:	08 95       	ret

000001f0 <TWI_start>:
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1 (not cleared automatically)
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
 1f0:	84 ea       	ldi	r24, 0xA4	; 164
 1f2:	86 bf       	out	0x36, r24	; 54

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWCR_TWINT));
 1f4:	06 b6       	in	r0, 0x36	; 54
 1f6:	07 fe       	sbrs	r0, 7
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <TWI_start+0x4>
}
 1fa:	08 95       	ret

000001fc <TWI_stop>:
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWSTO) | (1 << TWCR_TWEN);
 1fc:	84 e9       	ldi	r24, 0x94	; 148
 1fe:	86 bf       	out	0x36, r24	; 54
}
 200:	08 95       	ret

00000202 <TWI_writeByte>:
/* write cmd
 * Function to Send Slave Address for Write operation */
void TWI_writeByte(u8 data)
{
    /* Put data On TWI data Register */
    TWDR = data;
 202:	83 b9       	out	0x03, r24	; 3
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
 204:	84 e8       	ldi	r24, 0x84	; 132
 206:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWCR_TWINT));
 208:	06 b6       	in	r0, 0x36	; 54
 20a:	07 fe       	sbrs	r0, 7
 20c:	fd cf       	rjmp	.-6      	; 0x208 <TWI_writeByte+0x6>
}
 20e:	08 95       	ret

00000210 <TWI_readByteWithACK>:
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN) | (1 << TWCR_TWEA);
 210:	84 ec       	ldi	r24, 0xC4	; 196
 212:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWCR_TWINT));
 214:	06 b6       	in	r0, 0x36	; 54
 216:	07 fe       	sbrs	r0, 7
 218:	fd cf       	rjmp	.-6      	; 0x214 <TWI_readByteWithACK+0x4>
    /* Read Data */
    return TWDR;
 21a:	83 b1       	in	r24, 0x03	; 3
}
 21c:	08 95       	ret

0000021e <TWI_readByteWithNACK>:
{
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
 21e:	84 e8       	ldi	r24, 0x84	; 132
 220:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWCR_TWINT));
 222:	06 b6       	in	r0, 0x36	; 54
 224:	07 fe       	sbrs	r0, 7
 226:	fd cf       	rjmp	.-6      	; 0x222 <TWI_readByteWithNACK+0x4>
    /* Read Data */
    return TWDR;
 228:	83 b1       	in	r24, 0x03	; 3
}
 22a:	08 95       	ret

0000022c <TWI_getStatus>:

u8 TWI_getStatus(void)
{
    u8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
 22c:	81 b1       	in	r24, 0x01	; 1
    return status;
}
 22e:	88 7f       	andi	r24, 0xF8	; 248
 230:	08 95       	ret

00000232 <MGI_voidEnable>:
#include "GI_configuration.h"


void MGI_voidEnable (void)
{
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 232:	8f b7       	in	r24, 0x3f	; 63
 234:	80 68       	ori	r24, 0x80	; 128
 236:	8f bf       	out	0x3f, r24	; 63
}
 238:	08 95       	ret

0000023a <MGI_voidDisable>:
void MGI_voidDisable (void)
{
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 23a:	8f b7       	in	r24, 0x3f	; 63
 23c:	8f 77       	andi	r24, 0x7F	; 127
 23e:	8f bf       	out	0x3f, r24	; 63
}
 240:	08 95       	ret

00000242 <MDIO_voidInit>:
#include "DIO_Cfg.h"

void MDIO_voidInit()
{

	DDRA_REG=CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION
 242:	1a ba       	out	0x1a, r1	; 26
					 ,PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG=CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	87 bb       	out	0x17, r24	; 23
					 ,PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG=CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION
 248:	84 bb       	out	0x14, r24	; 20
					 ,PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG=CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION
 24a:	8e ef       	ldi	r24, 0xFE	; 254
 24c:	81 bb       	out	0x11, r24	; 17
					 ,PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);


	PORTA_REG=CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,PA5_INITIAL_VALUE,PA4_INITIAL_VALUE
 24e:	1b ba       	out	0x1b, r1	; 27
					 ,PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG=CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,PB5_INITIAL_VALUE,PB4_INITIAL_VALUE
 250:	18 ba       	out	0x18, r1	; 24
					 ,PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG=CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,PC5_INITIAL_VALUE,PC4_INITIAL_VALUE
 252:	15 ba       	out	0x15, r1	; 21
					 ,PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG=CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,PD5_INITIAL_VALUE,PD4_INITIAL_VALUE
 254:	12 ba       	out	0x12, r1	; 18
					 ,PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
 256:	08 95       	ret

00000258 <MADC_voidInit>:


void MADC_voidInit (void)
{
	// 1 - Select AVCC with external capacitor at AREF pin
	SET_BIT(ADMUX,6);
 258:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
 25a:	3f 98       	cbi	0x07, 7	; 7

	// 2 - Right Adjustment
	CLR_BIT(ADMUX,5);
 25c:	3d 98       	cbi	0x07, 5	; 7

	// 3 - Disable Auto Trigger
	CLR_BIT(ADCSRA,5);
 25e:	35 98       	cbi	0x06, 5	; 6

	// 4 - Select CLK/64
	CLR_BIT(ADCSRA,0);
 260:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
 262:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
 264:	32 9a       	sbi	0x06, 2	; 6

	// 5 - Enable ADC
	SET_BIT(ADCSRA,7);
 266:	37 9a       	sbi	0x06, 7	; 6

}
 268:	08 95       	ret

0000026a <MADC_u16GetDigitalvalue>:

u16 MADC_u16GetDigitalvalue (ADC_CHANNELS A_AdcChannel)
{
 26a:	98 2f       	mov	r25, r24
	u16 local_u16DigitalValue=0;
	if (A_AdcChannel <32)
 26c:	80 32       	cpi	r24, 0x20	; 32
 26e:	18 f0       	brcs	.+6      	; 0x276 <MADC_u16GetDigitalvalue+0xc>
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	0c c0       	rjmp	.+24     	; 0x28e <MADC_u16GetDigitalvalue+0x24>
	{
		// Clear the channel 5-bits
		ADMUX &= ADC_CHANNEL_MASK;
 276:	87 b1       	in	r24, 0x07	; 7
 278:	80 7e       	andi	r24, 0xE0	; 224
 27a:	87 b9       	out	0x07, r24	; 7

		// select channel
		ADMUX |= A_AdcChannel;
 27c:	87 b1       	in	r24, 0x07	; 7
 27e:	89 2b       	or	r24, r25
 280:	87 b9       	out	0x07, r24	; 7

		// start conversion
		SET_BIT(ADCSRA,6);
 282:	36 9a       	sbi	0x06, 6	; 6

		// Polling on ADC Complete flag
		while (GET_BIT(ADCSRA,4) == 0);
 284:	34 9b       	sbis	0x06, 4	; 6
 286:	fe cf       	rjmp	.-4      	; 0x284 <MADC_u16GetDigitalvalue+0x1a>

		// Clear INT. Flag
		SET_BIT(ADCSRA,4);
 288:	34 9a       	sbi	0x06, 4	; 6

		// Read Conversion Value
		local_u16DigitalValue = ADCLH;
 28a:	24 b1       	in	r18, 0x04	; 4
 28c:	35 b1       	in	r19, 0x05	; 5
	}
	// return result of conversion
	return local_u16DigitalValue;
}
 28e:	c9 01       	movw	r24, r18
 290:	08 95       	ret

00000292 <PCF8574_write>:


u8 global_LCD=0;//performs like a buffer

static u8 PCF8574_write(u8 data)
{
 292:	1f 93       	push	r17
 294:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 296:	80 ed       	ldi	r24, 0xD0	; 208
 298:	97 e0       	ldi	r25, 0x07	; 7
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <PCF8574_write+0x8>
	_delay_ms(1);
	data|=LCD_BACKLIGHT;//doesn't affect the data as the backlight pin is not connected to LCD
	TWI_start();
 29e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <TWI_start>
	if (TWI_getStatus() != TWI_START)
 2a2:	0e 94 16 01 	call	0x22c	; 0x22c <TWI_getStatus>
 2a6:	88 30       	cpi	r24, 0x08	; 8
 2a8:	99 f4       	brne	.+38     	; 0x2d0 <PCF8574_write+0x3e>
		return ERROR;

	TWI_writeByte((slave_address_fixed_bits) | WRITE);
 2aa:	8e e4       	ldi	r24, 0x4E	; 78
 2ac:	0e 94 01 01 	call	0x202	; 0x202 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
 2b0:	0e 94 16 01 	call	0x22c	; 0x22c <TWI_getStatus>
 2b4:	88 31       	cpi	r24, 0x18	; 24
 2b6:	61 f4       	brne	.+24     	; 0x2d0 <PCF8574_write+0x3e>
		return ERROR;

	TWI_writeByte(data);
 2b8:	81 2f       	mov	r24, r17
 2ba:	88 60       	ori	r24, 0x08	; 8
 2bc:	0e 94 01 01 	call	0x202	; 0x202 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
 2c0:	0e 94 16 01 	call	0x22c	; 0x22c <TWI_getStatus>
 2c4:	88 32       	cpi	r24, 0x28	; 40
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <PCF8574_write+0x3e>
			return ERROR;

	TWI_stop();
 2c8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_stop>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <PCF8574_write+0x40>

	return SUCCESS;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
}
 2d2:	1f 91       	pop	r17
 2d4:	08 95       	ret

000002d6 <LCD_sendWithLowEn>:
	_delay_ms(1);

}
void LCD_sendWithLowEn(){

		CLR_BIT(global_LCD,LCD_E_PIN_ID);
 2d6:	80 91 e4 01 	lds	r24, 0x01E4
 2da:	8b 7f       	andi	r24, 0xFB	; 251
 2dc:	80 93 e4 01 	sts	0x01E4, r24
		PCF8574_write(global_LCD);
 2e0:	0e 94 49 01 	call	0x292	; 0x292 <PCF8574_write>
 2e4:	80 ed       	ldi	r24, 0xD0	; 208
 2e6:	97 e0       	ldi	r25, 0x07	; 7
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_sendWithLowEn+0x12>
		_delay_ms(1);
}
 2ec:	08 95       	ret

000002ee <LCD_sendWithHighEn>:

}


void LCD_sendWithHighEn(){
	SET_BIT(global_LCD,LCD_E_PIN_ID);
 2ee:	80 91 e4 01 	lds	r24, 0x01E4
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	80 93 e4 01 	sts	0x01E4, r24
	PCF8574_write(global_LCD);
 2f8:	0e 94 49 01 	call	0x292	; 0x292 <PCF8574_write>
 2fc:	80 ed       	ldi	r24, 0xD0	; 208
 2fe:	97 e0       	ldi	r25, 0x07	; 7
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_sendWithHighEn+0x12>
	_delay_ms(1);

}
 304:	08 95       	ret

00000306 <LCD_displayCharacter>:
	LCD_sendWithLowEn();
}


void LCD_displayCharacter(u8 data)
{//SAME as command but we set RS_PIN ->1
 306:	1f 93       	push	r17
 308:	18 2f       	mov	r17, r24
 30a:	80 ed       	ldi	r24, 0xD0	; 208
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_displayCharacter+0x8>
	_delay_ms(1);
	//DATA MODE
	SET_BIT(global_LCD,LCD_RS_PIN_ID);
	CLR_BIT(global_LCD,LCD_RW_PIN_ID);
	//high 4 bits
	global_LCD = (global_LCD & 0x0F) | (data & 0xF0);
 312:	91 2f       	mov	r25, r17
 314:	90 7f       	andi	r25, 0xF0	; 240
 316:	80 91 e4 01 	lds	r24, 0x01E4
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	8d 70       	andi	r24, 0x0D	; 13
 31e:	98 2b       	or	r25, r24
 320:	90 93 e4 01 	sts	0x01E4, r25
	LCD_sendWithHighEn();
 324:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_sendWithHighEn>
	LCD_sendWithLowEn();
 328:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_sendWithLowEn>
	//LOW 4 bits
	global_LCD = (global_LCD & 0x0F) | ((data & 0x0F) << 4);
 32c:	12 95       	swap	r17
 32e:	10 7f       	andi	r17, 0xF0	; 240
 330:	80 91 e4 01 	lds	r24, 0x01E4
 334:	8f 70       	andi	r24, 0x0F	; 15
 336:	81 2b       	or	r24, r17
 338:	80 93 e4 01 	sts	0x01E4, r24
	LCD_sendWithHighEn();
 33c:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_sendWithHighEn>
	LCD_sendWithLowEn();
 340:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_sendWithLowEn>
}
 344:	1f 91       	pop	r17
 346:	08 95       	ret

00000348 <LCD_displayString>:


void LCD_displayString(const u8 *Str)
{
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ec 01       	movw	r28, r24
 350:	10 e0       	ldi	r17, 0x00	; 0
 352:	03 c0       	rjmp	.+6      	; 0x35a <LCD_displayString+0x12>
	u8 i = 0;
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
 354:	0e 94 83 01 	call	0x306	; 0x306 <LCD_displayCharacter>
		i++;
 358:	1f 5f       	subi	r17, 0xFF	; 255


void LCD_displayString(const u8 *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
 35a:	fe 01       	movw	r30, r28
 35c:	e1 0f       	add	r30, r17
 35e:	f1 1d       	adc	r31, r1
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	b9 f7       	brne	.-18     	; 0x354 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	08 95       	ret

0000036e <LCD_sendCommand>:
		CLR_BIT(global_LCD,LCD_E_PIN_ID);
		PCF8574_write(global_LCD);
		_delay_ms(1);
}
void LCD_sendCommand(u8 command)
{
 36e:	1f 93       	push	r17
 370:	18 2f       	mov	r17, r24
 372:	80 ed       	ldi	r24, 0xD0	; 208
 374:	97 e0       	ldi	r25, 0x07	; 7
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <LCD_sendCommand+0x8>
	//COMMAND MODE
	_delay_ms(1);
	CLR_BIT(global_LCD,LCD_RS_PIN_ID);
	CLR_BIT(global_LCD,LCD_RW_PIN_ID);
 37a:	80 91 e4 01 	lds	r24, 0x01E4
 37e:	8c 7f       	andi	r24, 0xFC	; 252
 380:	80 93 e4 01 	sts	0x01E4, r24
	LCD_sendWithHighEn();
 384:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_sendWithHighEn>
	//high 4 bits
	global_LCD = (global_LCD & 0x0F) | (command & 0xF0);
 388:	91 2f       	mov	r25, r17
 38a:	90 7f       	andi	r25, 0xF0	; 240
 38c:	80 91 e4 01 	lds	r24, 0x01E4
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	98 2b       	or	r25, r24
 394:	90 93 e4 01 	sts	0x01E4, r25
	LCD_sendWithHighEn();
 398:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_sendWithHighEn>
	LCD_sendWithLowEn();
 39c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_sendWithLowEn>
	//low 4 bits
	global_LCD = (global_LCD & 0x0F) | ((command & 0x0F) << 4);
 3a0:	12 95       	swap	r17
 3a2:	10 7f       	andi	r17, 0xF0	; 240
 3a4:	80 91 e4 01 	lds	r24, 0x01E4
 3a8:	8f 70       	andi	r24, 0x0F	; 15
 3aa:	81 2b       	or	r24, r17
 3ac:	80 93 e4 01 	sts	0x01E4, r24
	LCD_sendWithHighEn();
 3b0:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_sendWithHighEn>
	LCD_sendWithLowEn();
 3b4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_sendWithLowEn>
}
 3b8:	1f 91       	pop	r17
 3ba:	08 95       	ret

000003bc <LCD_HEART>:
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
}


void LCD_HEART(void) {
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
        0b00100,
        0b00000,
		0b00000
    };

    LCD_sendCommand(LCD_CGRAM_START);
 3c0:	80 e4       	ldi	r24, 0x40	; 64
 3c2:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCommand>
 3c6:	c9 ed       	ldi	r28, 0xD9	; 217
 3c8:	d1 e0       	ldi	r29, 0x01	; 1

    // Load the custom character data into CGRAM
    for (u8 i = 0; i < 8; ++i) {
        LCD_displayCharacter(heartCharMap[i]);
 3ca:	89 91       	ld	r24, Y+
 3cc:	0e 94 83 01 	call	0x306	; 0x306 <LCD_displayCharacter>
    };

    LCD_sendCommand(LCD_CGRAM_START);

    // Load the custom character data into CGRAM
    for (u8 i = 0; i < 8; ++i) {
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	c1 3e       	cpi	r28, 0xE1	; 225
 3d4:	d8 07       	cpc	r29, r24
 3d6:	c9 f7       	brne	.-14     	; 0x3ca <LCD_HEART+0xe>
        LCD_displayCharacter(heartCharMap[i]);
    }
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <LCD_clearScreen>:
}


void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCommand>
}
 3e4:	08 95       	ret

000003e6 <LCD_init>:
 3e6:	80 e6       	ldi	r24, 0x60	; 96
 3e8:	9a ee       	ldi	r25, 0xEA	; 234
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_init+0x4>
}

void LCD_init(void)
{
	_delay_ms(30);
	TWI_init();
 3ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <TWI_init>
	LCD_HEART();
 3f2:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_HEART>
	LCD_sendCommand(LCD_GO_TO_HOME);//--- Return to Home
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCommand>
	LCD_sendCommand(0x0E);//use it for simulation only (different screen)
 3fc:	8e e0       	ldi	r24, 0x0E	; 14
 3fe:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);				//--- Clear LCD
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_sendCommand>


}
 408:	08 95       	ret

0000040a <HFLEX_SENSOR_CALCULATE_RES>:

#include "../../LIB/STD_TYPES.h"


u16 HFLEX_SENSOR_CALCULATE_RES(u16 Voutput,u16 Vinput,u32 fixed_resistance){
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	7c 01       	movw	r14, r24
 414:	68 1b       	sub	r22, r24
 416:	79 0b       	sbc	r23, r25
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsi3>
 420:	00 e0       	ldi	r16, 0x00	; 0
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	a8 01       	movw	r20, r16
 426:	97 01       	movw	r18, r14
 428:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 42c:	c9 01       	movw	r24, r18
	//Vout=Vin*(R2/(R1+R2) where R1 is the flex
	//hence
	//flex resestince = (fixed resistance * (Vin - Vout)) / Vout
	u16 flex=(fixed_resistance*(Vinput-Voutput))/Voutput;
	return flex;
}
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	08 95       	ret

00000438 <lookupWord>:
    u8 fingerCombination;
    u8* word;
};

u8* lookupWord(u8 fingerState, struct DictionaryEntry* dictionary, u8 dictionarySize);
u8* lookupWord(u8 fingerState, struct DictionaryEntry* dictionary, u8 dictionarySize) {
 438:	1f 93       	push	r17
 43a:	18 2f       	mov	r17, r24
 43c:	fb 01       	movw	r30, r22
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0

    for (int i = 0; i < dictionarySize; ++i) {
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	0c c0       	rjmp	.+24     	; 0x45e <lookupWord+0x26>
 446:	df 01       	movw	r26, r30

        if (dictionary[i].fingerCombination == fingerState) {
 448:	80 81       	ld	r24, Z
 44a:	33 96       	adiw	r30, 0x03	; 3
 44c:	81 17       	cp	r24, r17
 44e:	29 f4       	brne	.+10     	; 0x45a <lookupWord+0x22>
            return dictionary[i].word;
 450:	11 96       	adiw	r26, 0x01	; 1
 452:	2d 91       	ld	r18, X+
 454:	3c 91       	ld	r19, X
 456:	12 97       	sbiw	r26, 0x02	; 2
 458:	07 c0       	rjmp	.+14     	; 0x468 <lookupWord+0x30>
};

u8* lookupWord(u8 fingerState, struct DictionaryEntry* dictionary, u8 dictionarySize);
u8* lookupWord(u8 fingerState, struct DictionaryEntry* dictionary, u8 dictionarySize) {

    for (int i = 0; i < dictionarySize; ++i) {
 45a:	2f 5f       	subi	r18, 0xFF	; 255
 45c:	3f 4f       	sbci	r19, 0xFF	; 255
 45e:	24 17       	cp	r18, r20
 460:	35 07       	cpc	r19, r21
 462:	8c f3       	brlt	.-30     	; 0x446 <lookupWord+0xe>
 464:	20 e6       	ldi	r18, 0x60	; 96
 466:	30 e0       	ldi	r19, 0x00	; 0
        if (dictionary[i].fingerCombination == fingerState) {
            return dictionary[i].word;
        }
    }
    return "Unknown"; // Return a default word for unknown combinations
}
 468:	c9 01       	movw	r24, r18
 46a:	1f 91       	pop	r17
 46c:	08 95       	ret

0000046e <GET_STATS>:

	}
}


u8 GET_STATS(){
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	c9 ee       	ldi	r28, 0xE9	; 233
 476:	d1 e0       	ldi	r29, 0x01	; 1
 478:	10 e0       	ldi	r17, 0x00	; 0
	// Read in mv
	for (u8 i=0;i<5;i++){
		local_u16DigitalValue = MADC_u16GetDigitalvalue(i);
 47a:	81 2f       	mov	r24, r17
 47c:	0e 94 35 01 	call	0x26a	; 0x26a <MADC_u16GetDigitalvalue>
 480:	90 93 ef 01 	sts	0x01EF, r25
 484:	80 93 ee 01 	sts	0x01EE, r24
		local_u16AnalogValue  = (local_u16DigitalValue * 5000UL) / 1024;
 488:	a0 e0       	ldi	r26, 0x00	; 0
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	bc 01       	movw	r22, r24
 48e:	cd 01       	movw	r24, r26
 490:	28 e8       	ldi	r18, 0x88	; 136
 492:	33 e1       	ldi	r19, 0x13	; 19
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsi3>
 49c:	dc 01       	movw	r26, r24
 49e:	cb 01       	movw	r24, r22
 4a0:	2a e0       	ldi	r18, 0x0A	; 10
 4a2:	b6 95       	lsr	r27
 4a4:	a7 95       	ror	r26
 4a6:	97 95       	ror	r25
 4a8:	87 95       	ror	r24
 4aa:	2a 95       	dec	r18
 4ac:	d1 f7       	brne	.-12     	; 0x4a2 <GET_STATS+0x34>
 4ae:	90 93 f1 01 	sts	0x01F1, r25
 4b2:	80 93 f0 01 	sts	0x01F0, r24
		hand_analog_reads[i]=HFLEX_SENSOR_CALCULATE_RES(local_u16AnalogValue,Vin,fixed_resistor)/1000;
 4b6:	68 e8       	ldi	r22, 0x88	; 136
 4b8:	73 e1       	ldi	r23, 0x13	; 19
 4ba:	20 ea       	ldi	r18, 0xA0	; 160
 4bc:	36 e8       	ldi	r19, 0x86	; 134
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	0e 94 05 02 	call	0x40a	; 0x40a <HFLEX_SENSOR_CALCULATE_RES>
 4c6:	68 ee       	ldi	r22, 0xE8	; 232
 4c8:	73 e0       	ldi	r23, 0x03	; 3
 4ca:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 4ce:	69 93       	st	Y+, r22
}


u8 GET_STATS(){
	// Read in mv
	for (u8 i=0;i<5;i++){
 4d0:	1f 5f       	subi	r17, 0xFF	; 255
 4d2:	15 30       	cpi	r17, 0x05	; 5
 4d4:	91 f6       	brne	.-92     	; 0x47a <GET_STATS+0xc>
		local_u16DigitalValue = MADC_u16GetDigitalvalue(i);
		local_u16AnalogValue  = (local_u16DigitalValue * 5000UL) / 1024;
		hand_analog_reads[i]=HFLEX_SENSOR_CALCULATE_RES(local_u16AnalogValue,Vin,fixed_resistor)/1000;

	}
	stats = TO_BINARY(
 4d6:	80 91 e9 01 	lds	r24, 0x01E9
 4da:	8a 31       	cpi	r24, 0x1A	; 26
 4dc:	10 f4       	brcc	.+4      	; 0x4e2 <GET_STATS+0x74>
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <GET_STATS+0x76>
 4e2:	50 e1       	ldi	r21, 0x10	; 16
 4e4:	80 91 ea 01 	lds	r24, 0x01EA
 4e8:	8a 31       	cpi	r24, 0x1A	; 26
 4ea:	10 f4       	brcc	.+4      	; 0x4f0 <GET_STATS+0x82>
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <GET_STATS+0x84>
 4f0:	48 e0       	ldi	r20, 0x08	; 8
 4f2:	80 91 eb 01 	lds	r24, 0x01EB
 4f6:	8a 31       	cpi	r24, 0x1A	; 26
 4f8:	10 f4       	brcc	.+4      	; 0x4fe <GET_STATS+0x90>
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	01 c0       	rjmp	.+2      	; 0x500 <GET_STATS+0x92>
 4fe:	34 e0       	ldi	r19, 0x04	; 4
 500:	80 91 ec 01 	lds	r24, 0x01EC
 504:	8a 31       	cpi	r24, 0x1A	; 26
 506:	10 f4       	brcc	.+4      	; 0x50c <GET_STATS+0x9e>
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	01 c0       	rjmp	.+2      	; 0x50e <GET_STATS+0xa0>
 50c:	22 e0       	ldi	r18, 0x02	; 2
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	80 91 ed 01 	lds	r24, 0x01ED
 514:	8a 31       	cpi	r24, 0x1A	; 26
 516:	08 f0       	brcs	.+2      	; 0x51a <GET_STATS+0xac>
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	85 2f       	mov	r24, r21
 51c:	89 2b       	or	r24, r25
 51e:	84 2b       	or	r24, r20
 520:	83 2b       	or	r24, r19
 522:	82 2b       	or	r24, r18
 524:	80 93 e6 01 	sts	0x01E6, r24
	    ISBEND(hand_analog_reads[2], 25),
	    ISBEND(hand_analog_reads[3], 25),
	    ISBEND(hand_analog_reads[4], 25)
		);
	return stats;
}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	08 95       	ret

00000530 <Timer0_CTC>:


void Timer0_CTC() {
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
    static u16 counter = 0;
    counter++;
 538:	80 91 e7 01 	lds	r24, 0x01E7
 53c:	90 91 e8 01 	lds	r25, 0x01E8
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	90 93 e8 01 	sts	0x01E8, r25
 546:	80 93 e7 01 	sts	0x01E7, r24
    u8 *text;
    u8 *receiver;

    if (counter == 30000) {//10000=2 seconds
 54a:	80 53       	subi	r24, 0x30	; 48
 54c:	95 47       	sbci	r25, 0x75	; 117
 54e:	49 f5       	brne	.+82     	; 0x5a2 <Timer0_CTC+0x72>
        counter = 0;
 550:	10 92 e8 01 	sts	0x01E8, r1
 554:	10 92 e7 01 	sts	0x01E7, r1
        stats = GET_STATS();
 558:	0e 94 37 02 	call	0x46e	; 0x46e <GET_STATS>
 55c:	98 2f       	mov	r25, r24
 55e:	80 93 e6 01 	sts	0x01E6, r24

        switch (ISEQUAL(stats, pre_stats)) {
 562:	80 91 e5 01 	lds	r24, 0x01E5
 566:	98 17       	cp	r25, r24
 568:	e1 f0       	breq	.+56     	; 0x5a2 <Timer0_CTC+0x72>
            case 1:
            	//do nothing as nothing occured
                break;
            case 0:
                text = lookupWord(stats, dictionary, 32);
 56a:	89 2f       	mov	r24, r25
 56c:	69 e7       	ldi	r22, 0x79	; 121
 56e:	71 e0       	ldi	r23, 0x01	; 1
 570:	40 e2       	ldi	r20, 0x20	; 32
 572:	0e 94 1c 02 	call	0x438	; 0x438 <lookupWord>
 576:	8c 01       	movw	r16, r24
                LCD_clearScreen();
 578:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_clearScreen>
                MUART_voidSendStringSyncBlocking(text);
 57c:	c8 01       	movw	r24, r16
 57e:	0e 94 59 00 	call	0xb2	; 0xb2 <MUART_voidSendStringSyncBlocking>
                receiver = MUART_u8ReadStringSyncBlocking();
 582:	0e 94 6a 00 	call	0xd4	; 0xd4 <MUART_u8ReadStringSyncBlocking>
 586:	ec 01       	movw	r28, r24

                if (receiver) {
 588:	00 97       	sbiw	r24, 0x00	; 0
 58a:	11 f4       	brne	.+4      	; 0x590 <Timer0_CTC+0x60>
                            LCD_displayString(receiver);

                }
                else {
                    LCD_displayString("Error");
 58c:	88 e6       	ldi	r24, 0x68	; 104
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_displayString>
                }

                free(receiver);
 594:	ce 01       	movw	r24, r28
 596:	0e 94 fd 03 	call	0x7fa	; 0x7fa <free>
                pre_stats = stats;
 59a:	80 91 e6 01 	lds	r24, 0x01E6
 59e:	80 93 e5 01 	sts	0x01E5, r24
                break;
        }
    }
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	08 95       	ret

000005ac <main>:
u8 pre_stats=0,stats=0;


int main (void)
{
	MDIO_voidInit();
 5ac:	0e 94 21 01 	call	0x242	; 0x242 <MDIO_voidInit>
	MADC_voidInit();
 5b0:	0e 94 2c 01 	call	0x258	; 0x258 <MADC_voidInit>
	MGI_voidEnable();
 5b4:	0e 94 19 01 	call	0x232	; 0x232 <MGI_voidEnable>
	LCD_init();
 5b8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_init>
	LCD_displayString("I ");
 5bc:	8e e6       	ldi	r24, 0x6E	; 110
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_displayString>
	LCD_displayCharacter(0);
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	0e 94 83 01 	call	0x306	; 0x306 <LCD_displayCharacter>
	LCD_displayString(" IMT");
 5ca:	81 e7       	ldi	r24, 0x71	; 113
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_displayString>
 5d2:	80 e3       	ldi	r24, 0x30	; 48
 5d4:	95 e7       	ldi	r25, 0x75	; 117
 5d6:	28 ec       	ldi	r18, 0xC8	; 200
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	f9 01       	movw	r30, r18
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5e2:	d9 f7       	brne	.-10     	; 0x5da <main+0x2e>
	_delay_ms(3000);
	MTIMER0_voidSetCTCCallback(Timer0_CTC);
 5e4:	88 e9       	ldi	r24, 0x98	; 152
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	0e 94 c1 00 	call	0x182	; 0x182 <MTIMER0_voidSetCTCCallback>
	MTIMER0_voidInit();
 5ec:	0e 94 ac 00 	call	0x158	; 0x158 <MTIMER0_voidInit>
	MUART_voidInit();
 5f0:	0e 94 49 00 	call	0x92	; 0x92 <MUART_voidInit>
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <main+0x48>

000005f6 <__mulsi3>:
 5f6:	62 9f       	mul	r22, r18
 5f8:	d0 01       	movw	r26, r0
 5fa:	73 9f       	mul	r23, r19
 5fc:	f0 01       	movw	r30, r0
 5fe:	82 9f       	mul	r24, r18
 600:	e0 0d       	add	r30, r0
 602:	f1 1d       	adc	r31, r1
 604:	64 9f       	mul	r22, r20
 606:	e0 0d       	add	r30, r0
 608:	f1 1d       	adc	r31, r1
 60a:	92 9f       	mul	r25, r18
 60c:	f0 0d       	add	r31, r0
 60e:	83 9f       	mul	r24, r19
 610:	f0 0d       	add	r31, r0
 612:	74 9f       	mul	r23, r20
 614:	f0 0d       	add	r31, r0
 616:	65 9f       	mul	r22, r21
 618:	f0 0d       	add	r31, r0
 61a:	99 27       	eor	r25, r25
 61c:	72 9f       	mul	r23, r18
 61e:	b0 0d       	add	r27, r0
 620:	e1 1d       	adc	r30, r1
 622:	f9 1f       	adc	r31, r25
 624:	63 9f       	mul	r22, r19
 626:	b0 0d       	add	r27, r0
 628:	e1 1d       	adc	r30, r1
 62a:	f9 1f       	adc	r31, r25
 62c:	bd 01       	movw	r22, r26
 62e:	cf 01       	movw	r24, r30
 630:	11 24       	eor	r1, r1
 632:	08 95       	ret

00000634 <__udivmodhi4>:
 634:	aa 1b       	sub	r26, r26
 636:	bb 1b       	sub	r27, r27
 638:	51 e1       	ldi	r21, 0x11	; 17
 63a:	07 c0       	rjmp	.+14     	; 0x64a <__udivmodhi4_ep>

0000063c <__udivmodhi4_loop>:
 63c:	aa 1f       	adc	r26, r26
 63e:	bb 1f       	adc	r27, r27
 640:	a6 17       	cp	r26, r22
 642:	b7 07       	cpc	r27, r23
 644:	10 f0       	brcs	.+4      	; 0x64a <__udivmodhi4_ep>
 646:	a6 1b       	sub	r26, r22
 648:	b7 0b       	sbc	r27, r23

0000064a <__udivmodhi4_ep>:
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	5a 95       	dec	r21
 650:	a9 f7       	brne	.-22     	; 0x63c <__udivmodhi4_loop>
 652:	80 95       	com	r24
 654:	90 95       	com	r25
 656:	bc 01       	movw	r22, r24
 658:	cd 01       	movw	r24, r26
 65a:	08 95       	ret

0000065c <__udivmodsi4>:
 65c:	a1 e2       	ldi	r26, 0x21	; 33
 65e:	1a 2e       	mov	r1, r26
 660:	aa 1b       	sub	r26, r26
 662:	bb 1b       	sub	r27, r27
 664:	fd 01       	movw	r30, r26
 666:	0d c0       	rjmp	.+26     	; 0x682 <__udivmodsi4_ep>

00000668 <__udivmodsi4_loop>:
 668:	aa 1f       	adc	r26, r26
 66a:	bb 1f       	adc	r27, r27
 66c:	ee 1f       	adc	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	a2 17       	cp	r26, r18
 672:	b3 07       	cpc	r27, r19
 674:	e4 07       	cpc	r30, r20
 676:	f5 07       	cpc	r31, r21
 678:	20 f0       	brcs	.+8      	; 0x682 <__udivmodsi4_ep>
 67a:	a2 1b       	sub	r26, r18
 67c:	b3 0b       	sbc	r27, r19
 67e:	e4 0b       	sbc	r30, r20
 680:	f5 0b       	sbc	r31, r21

00000682 <__udivmodsi4_ep>:
 682:	66 1f       	adc	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	1a 94       	dec	r1
 68c:	69 f7       	brne	.-38     	; 0x668 <__udivmodsi4_loop>
 68e:	60 95       	com	r22
 690:	70 95       	com	r23
 692:	80 95       	com	r24
 694:	90 95       	com	r25
 696:	9b 01       	movw	r18, r22
 698:	ac 01       	movw	r20, r24
 69a:	bd 01       	movw	r22, r26
 69c:	cf 01       	movw	r24, r30
 69e:	08 95       	ret

000006a0 <malloc>:
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	bc 01       	movw	r22, r24
 6a6:	82 30       	cpi	r24, 0x02	; 2
 6a8:	91 05       	cpc	r25, r1
 6aa:	10 f4       	brcc	.+4      	; 0x6b0 <malloc+0x10>
 6ac:	62 e0       	ldi	r22, 0x02	; 2
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	a0 91 f4 01 	lds	r26, 0x01F4
 6b4:	b0 91 f5 01 	lds	r27, 0x01F5
 6b8:	ed 01       	movw	r28, r26
 6ba:	e0 e0       	ldi	r30, 0x00	; 0
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	21 c0       	rjmp	.+66     	; 0x706 <malloc+0x66>
 6c4:	88 81       	ld	r24, Y
 6c6:	99 81       	ldd	r25, Y+1	; 0x01
 6c8:	86 17       	cp	r24, r22
 6ca:	97 07       	cpc	r25, r23
 6cc:	69 f4       	brne	.+26     	; 0x6e8 <malloc+0x48>
 6ce:	8a 81       	ldd	r24, Y+2	; 0x02
 6d0:	9b 81       	ldd	r25, Y+3	; 0x03
 6d2:	30 97       	sbiw	r30, 0x00	; 0
 6d4:	19 f0       	breq	.+6      	; 0x6dc <malloc+0x3c>
 6d6:	93 83       	std	Z+3, r25	; 0x03
 6d8:	82 83       	std	Z+2, r24	; 0x02
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <malloc+0x44>
 6dc:	90 93 f5 01 	sts	0x01F5, r25
 6e0:	80 93 f4 01 	sts	0x01F4, r24
 6e4:	fe 01       	movw	r30, r28
 6e6:	34 c0       	rjmp	.+104    	; 0x750 <malloc+0xb0>
 6e8:	68 17       	cp	r22, r24
 6ea:	79 07       	cpc	r23, r25
 6ec:	38 f4       	brcc	.+14     	; 0x6fc <malloc+0x5c>
 6ee:	41 15       	cp	r20, r1
 6f0:	51 05       	cpc	r21, r1
 6f2:	19 f0       	breq	.+6      	; 0x6fa <malloc+0x5a>
 6f4:	84 17       	cp	r24, r20
 6f6:	95 07       	cpc	r25, r21
 6f8:	08 f4       	brcc	.+2      	; 0x6fc <malloc+0x5c>
 6fa:	ac 01       	movw	r20, r24
 6fc:	fe 01       	movw	r30, r28
 6fe:	8a 81       	ldd	r24, Y+2	; 0x02
 700:	9b 81       	ldd	r25, Y+3	; 0x03
 702:	9c 01       	movw	r18, r24
 704:	e9 01       	movw	r28, r18
 706:	20 97       	sbiw	r28, 0x00	; 0
 708:	e9 f6       	brne	.-70     	; 0x6c4 <malloc+0x24>
 70a:	41 15       	cp	r20, r1
 70c:	51 05       	cpc	r21, r1
 70e:	a9 f1       	breq	.+106    	; 0x77a <malloc+0xda>
 710:	ca 01       	movw	r24, r20
 712:	86 1b       	sub	r24, r22
 714:	97 0b       	sbc	r25, r23
 716:	04 97       	sbiw	r24, 0x04	; 4
 718:	08 f4       	brcc	.+2      	; 0x71c <malloc+0x7c>
 71a:	ba 01       	movw	r22, r20
 71c:	e0 e0       	ldi	r30, 0x00	; 0
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	2a c0       	rjmp	.+84     	; 0x776 <malloc+0xd6>
 722:	8d 91       	ld	r24, X+
 724:	9c 91       	ld	r25, X
 726:	11 97       	sbiw	r26, 0x01	; 1
 728:	84 17       	cp	r24, r20
 72a:	95 07       	cpc	r25, r21
 72c:	f9 f4       	brne	.+62     	; 0x76c <malloc+0xcc>
 72e:	64 17       	cp	r22, r20
 730:	75 07       	cpc	r23, r21
 732:	81 f4       	brne	.+32     	; 0x754 <malloc+0xb4>
 734:	12 96       	adiw	r26, 0x02	; 2
 736:	8d 91       	ld	r24, X+
 738:	9c 91       	ld	r25, X
 73a:	13 97       	sbiw	r26, 0x03	; 3
 73c:	30 97       	sbiw	r30, 0x00	; 0
 73e:	19 f0       	breq	.+6      	; 0x746 <malloc+0xa6>
 740:	93 83       	std	Z+3, r25	; 0x03
 742:	82 83       	std	Z+2, r24	; 0x02
 744:	04 c0       	rjmp	.+8      	; 0x74e <malloc+0xae>
 746:	90 93 f5 01 	sts	0x01F5, r25
 74a:	80 93 f4 01 	sts	0x01F4, r24
 74e:	fd 01       	movw	r30, r26
 750:	32 96       	adiw	r30, 0x02	; 2
 752:	4f c0       	rjmp	.+158    	; 0x7f2 <malloc+0x152>
 754:	ca 01       	movw	r24, r20
 756:	86 1b       	sub	r24, r22
 758:	97 0b       	sbc	r25, r23
 75a:	fd 01       	movw	r30, r26
 75c:	e8 0f       	add	r30, r24
 75e:	f9 1f       	adc	r31, r25
 760:	61 93       	st	Z+, r22
 762:	71 93       	st	Z+, r23
 764:	02 97       	sbiw	r24, 0x02	; 2
 766:	8d 93       	st	X+, r24
 768:	9c 93       	st	X, r25
 76a:	43 c0       	rjmp	.+134    	; 0x7f2 <malloc+0x152>
 76c:	fd 01       	movw	r30, r26
 76e:	82 81       	ldd	r24, Z+2	; 0x02
 770:	93 81       	ldd	r25, Z+3	; 0x03
 772:	9c 01       	movw	r18, r24
 774:	d9 01       	movw	r26, r18
 776:	10 97       	sbiw	r26, 0x00	; 0
 778:	a1 f6       	brne	.-88     	; 0x722 <malloc+0x82>
 77a:	80 91 f2 01 	lds	r24, 0x01F2
 77e:	90 91 f3 01 	lds	r25, 0x01F3
 782:	89 2b       	or	r24, r25
 784:	41 f4       	brne	.+16     	; 0x796 <malloc+0xf6>
 786:	80 91 75 01 	lds	r24, 0x0175
 78a:	90 91 76 01 	lds	r25, 0x0176
 78e:	90 93 f3 01 	sts	0x01F3, r25
 792:	80 93 f2 01 	sts	0x01F2, r24
 796:	40 91 77 01 	lds	r20, 0x0177
 79a:	50 91 78 01 	lds	r21, 0x0178
 79e:	41 15       	cp	r20, r1
 7a0:	51 05       	cpc	r21, r1
 7a2:	41 f4       	brne	.+16     	; 0x7b4 <malloc+0x114>
 7a4:	4d b7       	in	r20, 0x3d	; 61
 7a6:	5e b7       	in	r21, 0x3e	; 62
 7a8:	80 91 73 01 	lds	r24, 0x0173
 7ac:	90 91 74 01 	lds	r25, 0x0174
 7b0:	48 1b       	sub	r20, r24
 7b2:	59 0b       	sbc	r21, r25
 7b4:	20 91 f2 01 	lds	r18, 0x01F2
 7b8:	30 91 f3 01 	lds	r19, 0x01F3
 7bc:	24 17       	cp	r18, r20
 7be:	35 07       	cpc	r19, r21
 7c0:	b0 f4       	brcc	.+44     	; 0x7ee <malloc+0x14e>
 7c2:	ca 01       	movw	r24, r20
 7c4:	82 1b       	sub	r24, r18
 7c6:	93 0b       	sbc	r25, r19
 7c8:	86 17       	cp	r24, r22
 7ca:	97 07       	cpc	r25, r23
 7cc:	80 f0       	brcs	.+32     	; 0x7ee <malloc+0x14e>
 7ce:	ab 01       	movw	r20, r22
 7d0:	4e 5f       	subi	r20, 0xFE	; 254
 7d2:	5f 4f       	sbci	r21, 0xFF	; 255
 7d4:	84 17       	cp	r24, r20
 7d6:	95 07       	cpc	r25, r21
 7d8:	50 f0       	brcs	.+20     	; 0x7ee <malloc+0x14e>
 7da:	42 0f       	add	r20, r18
 7dc:	53 1f       	adc	r21, r19
 7de:	50 93 f3 01 	sts	0x01F3, r21
 7e2:	40 93 f2 01 	sts	0x01F2, r20
 7e6:	f9 01       	movw	r30, r18
 7e8:	61 93       	st	Z+, r22
 7ea:	71 93       	st	Z+, r23
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <malloc+0x152>
 7ee:	e0 e0       	ldi	r30, 0x00	; 0
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	cf 01       	movw	r24, r30
 7f4:	df 91       	pop	r29
 7f6:	cf 91       	pop	r28
 7f8:	08 95       	ret

000007fa <free>:
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	00 97       	sbiw	r24, 0x00	; 0
 800:	09 f4       	brne	.+2      	; 0x804 <free+0xa>
 802:	50 c0       	rjmp	.+160    	; 0x8a4 <__stack+0x45>
 804:	ec 01       	movw	r28, r24
 806:	22 97       	sbiw	r28, 0x02	; 2
 808:	1b 82       	std	Y+3, r1	; 0x03
 80a:	1a 82       	std	Y+2, r1	; 0x02
 80c:	a0 91 f4 01 	lds	r26, 0x01F4
 810:	b0 91 f5 01 	lds	r27, 0x01F5
 814:	10 97       	sbiw	r26, 0x00	; 0
 816:	09 f1       	breq	.+66     	; 0x85a <free+0x60>
 818:	40 e0       	ldi	r20, 0x00	; 0
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	ac 17       	cp	r26, r28
 81e:	bd 07       	cpc	r27, r29
 820:	08 f1       	brcs	.+66     	; 0x864 <__stack+0x5>
 822:	bb 83       	std	Y+3, r27	; 0x03
 824:	aa 83       	std	Y+2, r26	; 0x02
 826:	fe 01       	movw	r30, r28
 828:	21 91       	ld	r18, Z+
 82a:	31 91       	ld	r19, Z+
 82c:	e2 0f       	add	r30, r18
 82e:	f3 1f       	adc	r31, r19
 830:	ae 17       	cp	r26, r30
 832:	bf 07       	cpc	r27, r31
 834:	79 f4       	brne	.+30     	; 0x854 <free+0x5a>
 836:	8d 91       	ld	r24, X+
 838:	9c 91       	ld	r25, X
 83a:	11 97       	sbiw	r26, 0x01	; 1
 83c:	28 0f       	add	r18, r24
 83e:	39 1f       	adc	r19, r25
 840:	2e 5f       	subi	r18, 0xFE	; 254
 842:	3f 4f       	sbci	r19, 0xFF	; 255
 844:	39 83       	std	Y+1, r19	; 0x01
 846:	28 83       	st	Y, r18
 848:	12 96       	adiw	r26, 0x02	; 2
 84a:	8d 91       	ld	r24, X+
 84c:	9c 91       	ld	r25, X
 84e:	13 97       	sbiw	r26, 0x03	; 3
 850:	9b 83       	std	Y+3, r25	; 0x03
 852:	8a 83       	std	Y+2, r24	; 0x02
 854:	41 15       	cp	r20, r1
 856:	51 05       	cpc	r21, r1
 858:	71 f4       	brne	.+28     	; 0x876 <__stack+0x17>
 85a:	d0 93 f5 01 	sts	0x01F5, r29
 85e:	c0 93 f4 01 	sts	0x01F4, r28
 862:	20 c0       	rjmp	.+64     	; 0x8a4 <__stack+0x45>
 864:	12 96       	adiw	r26, 0x02	; 2
 866:	8d 91       	ld	r24, X+
 868:	9c 91       	ld	r25, X
 86a:	13 97       	sbiw	r26, 0x03	; 3
 86c:	ad 01       	movw	r20, r26
 86e:	00 97       	sbiw	r24, 0x00	; 0
 870:	11 f0       	breq	.+4      	; 0x876 <__stack+0x17>
 872:	dc 01       	movw	r26, r24
 874:	d3 cf       	rjmp	.-90     	; 0x81c <free+0x22>
 876:	fa 01       	movw	r30, r20
 878:	d3 83       	std	Z+3, r29	; 0x03
 87a:	c2 83       	std	Z+2, r28	; 0x02
 87c:	21 91       	ld	r18, Z+
 87e:	31 91       	ld	r19, Z+
 880:	e2 0f       	add	r30, r18
 882:	f3 1f       	adc	r31, r19
 884:	ce 17       	cp	r28, r30
 886:	df 07       	cpc	r29, r31
 888:	69 f4       	brne	.+26     	; 0x8a4 <__stack+0x45>
 88a:	88 81       	ld	r24, Y
 88c:	99 81       	ldd	r25, Y+1	; 0x01
 88e:	28 0f       	add	r18, r24
 890:	39 1f       	adc	r19, r25
 892:	2e 5f       	subi	r18, 0xFE	; 254
 894:	3f 4f       	sbci	r19, 0xFF	; 255
 896:	fa 01       	movw	r30, r20
 898:	31 83       	std	Z+1, r19	; 0x01
 89a:	20 83       	st	Z, r18
 89c:	8a 81       	ldd	r24, Y+2	; 0x02
 89e:	9b 81       	ldd	r25, Y+3	; 0x03
 8a0:	93 83       	std	Z+3, r25	; 0x03
 8a2:	82 83       	std	Z+2, r24	; 0x02
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	08 95       	ret

000008aa <realloc>:
 8aa:	a0 e0       	ldi	r26, 0x00	; 0
 8ac:	b0 e0       	ldi	r27, 0x00	; 0
 8ae:	eb e5       	ldi	r30, 0x5B	; 91
 8b0:	f4 e0       	ldi	r31, 0x04	; 4
 8b2:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__prologue_saves__+0xc>
 8b6:	8c 01       	movw	r16, r24
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	29 f4       	brne	.+10     	; 0x8c6 <realloc+0x1c>
 8bc:	cb 01       	movw	r24, r22
 8be:	0e 94 50 03 	call	0x6a0	; 0x6a0 <malloc>
 8c2:	8c 01       	movw	r16, r24
 8c4:	ba c0       	rjmp	.+372    	; 0xa3a <realloc+0x190>
 8c6:	9e ef       	ldi	r25, 0xFE	; 254
 8c8:	e9 2e       	mov	r14, r25
 8ca:	9f ef       	ldi	r25, 0xFF	; 255
 8cc:	f9 2e       	mov	r15, r25
 8ce:	e0 0e       	add	r14, r16
 8d0:	f1 1e       	adc	r15, r17
 8d2:	58 01       	movw	r10, r16
 8d4:	a6 0e       	add	r10, r22
 8d6:	b7 1e       	adc	r11, r23
 8d8:	ae 14       	cp	r10, r14
 8da:	bf 04       	cpc	r11, r15
 8dc:	08 f4       	brcc	.+2      	; 0x8e0 <realloc+0x36>
 8de:	ab c0       	rjmp	.+342    	; 0xa36 <realloc+0x18c>
 8e0:	8e ef       	ldi	r24, 0xFE	; 254
 8e2:	88 2e       	mov	r8, r24
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	98 2e       	mov	r9, r24
 8e8:	8a 0c       	add	r8, r10
 8ea:	9b 1c       	adc	r9, r11
 8ec:	e7 01       	movw	r28, r14
 8ee:	48 81       	ld	r20, Y
 8f0:	59 81       	ldd	r21, Y+1	; 0x01
 8f2:	46 17       	cp	r20, r22
 8f4:	57 07       	cpc	r21, r23
 8f6:	b8 f0       	brcs	.+46     	; 0x926 <realloc+0x7c>
 8f8:	45 30       	cpi	r20, 0x05	; 5
 8fa:	51 05       	cpc	r21, r1
 8fc:	08 f4       	brcc	.+2      	; 0x900 <realloc+0x56>
 8fe:	9d c0       	rjmp	.+314    	; 0xa3a <realloc+0x190>
 900:	ca 01       	movw	r24, r20
 902:	04 97       	sbiw	r24, 0x04	; 4
 904:	86 17       	cp	r24, r22
 906:	97 07       	cpc	r25, r23
 908:	08 f4       	brcc	.+2      	; 0x90c <realloc+0x62>
 90a:	97 c0       	rjmp	.+302    	; 0xa3a <realloc+0x190>
 90c:	42 50       	subi	r20, 0x02	; 2
 90e:	50 40       	sbci	r21, 0x00	; 0
 910:	46 1b       	sub	r20, r22
 912:	57 0b       	sbc	r21, r23
 914:	f4 01       	movw	r30, r8
 916:	51 83       	std	Z+1, r21	; 0x01
 918:	40 83       	st	Z, r20
 91a:	79 83       	std	Y+1, r23	; 0x01
 91c:	68 83       	st	Y, r22
 91e:	c5 01       	movw	r24, r10
 920:	0e 94 fd 03 	call	0x7fa	; 0x7fa <free>
 924:	8a c0       	rjmp	.+276    	; 0xa3a <realloc+0x190>
 926:	6b 01       	movw	r12, r22
 928:	c4 1a       	sub	r12, r20
 92a:	d5 0a       	sbc	r13, r21
 92c:	e0 91 f4 01 	lds	r30, 0x01F4
 930:	f0 91 f5 01 	lds	r31, 0x01F5
 934:	a0 e0       	ldi	r26, 0x00	; 0
 936:	b0 e0       	ldi	r27, 0x00	; 0
 938:	c0 e0       	ldi	r28, 0x00	; 0
 93a:	d0 e0       	ldi	r29, 0x00	; 0
 93c:	42 c0       	rjmp	.+132    	; 0x9c2 <realloc+0x118>
 93e:	e8 15       	cp	r30, r8
 940:	f9 05       	cpc	r31, r9
 942:	a1 f5       	brne	.+104    	; 0x9ac <realloc+0x102>
 944:	20 81       	ld	r18, Z
 946:	31 81       	ldd	r19, Z+1	; 0x01
 948:	2c 15       	cp	r18, r12
 94a:	3d 05       	cpc	r19, r13
 94c:	78 f1       	brcs	.+94     	; 0x9ac <realloc+0x102>
 94e:	c9 01       	movw	r24, r18
 950:	02 96       	adiw	r24, 0x02	; 2
 952:	8c 15       	cp	r24, r12
 954:	9d 05       	cpc	r25, r13
 956:	a8 f0       	brcs	.+42     	; 0x982 <realloc+0xd8>
 958:	4e 5f       	subi	r20, 0xFE	; 254
 95a:	5f 4f       	sbci	r21, 0xFF	; 255
 95c:	42 0f       	add	r20, r18
 95e:	53 1f       	adc	r21, r19
 960:	e7 01       	movw	r28, r14
 962:	59 83       	std	Y+1, r21	; 0x01
 964:	48 83       	st	Y, r20
 966:	22 81       	ldd	r18, Z+2	; 0x02
 968:	33 81       	ldd	r19, Z+3	; 0x03
 96a:	10 97       	sbiw	r26, 0x00	; 0
 96c:	29 f0       	breq	.+10     	; 0x978 <realloc+0xce>
 96e:	13 96       	adiw	r26, 0x03	; 3
 970:	3c 93       	st	X, r19
 972:	2e 93       	st	-X, r18
 974:	12 97       	sbiw	r26, 0x02	; 2
 976:	61 c0       	rjmp	.+194    	; 0xa3a <realloc+0x190>
 978:	30 93 f5 01 	sts	0x01F5, r19
 97c:	20 93 f4 01 	sts	0x01F4, r18
 980:	5c c0       	rjmp	.+184    	; 0xa3a <realloc+0x190>
 982:	22 50       	subi	r18, 0x02	; 2
 984:	30 40       	sbci	r19, 0x00	; 0
 986:	2c 19       	sub	r18, r12
 988:	3d 09       	sbc	r19, r13
 98a:	31 83       	std	Z+1, r19	; 0x01
 98c:	20 83       	st	Z, r18
 98e:	10 97       	sbiw	r26, 0x00	; 0
 990:	29 f0       	breq	.+10     	; 0x99c <realloc+0xf2>
 992:	13 96       	adiw	r26, 0x03	; 3
 994:	fc 93       	st	X, r31
 996:	ee 93       	st	-X, r30
 998:	12 97       	sbiw	r26, 0x02	; 2
 99a:	04 c0       	rjmp	.+8      	; 0x9a4 <realloc+0xfa>
 99c:	f0 93 f5 01 	sts	0x01F5, r31
 9a0:	e0 93 f4 01 	sts	0x01F4, r30
 9a4:	f7 01       	movw	r30, r14
 9a6:	71 83       	std	Z+1, r23	; 0x01
 9a8:	60 83       	st	Z, r22
 9aa:	47 c0       	rjmp	.+142    	; 0xa3a <realloc+0x190>
 9ac:	80 81       	ld	r24, Z
 9ae:	91 81       	ldd	r25, Z+1	; 0x01
 9b0:	c8 17       	cp	r28, r24
 9b2:	d9 07       	cpc	r29, r25
 9b4:	08 f4       	brcc	.+2      	; 0x9b8 <realloc+0x10e>
 9b6:	ec 01       	movw	r28, r24
 9b8:	df 01       	movw	r26, r30
 9ba:	82 81       	ldd	r24, Z+2	; 0x02
 9bc:	93 81       	ldd	r25, Z+3	; 0x03
 9be:	9c 01       	movw	r18, r24
 9c0:	f9 01       	movw	r30, r18
 9c2:	30 97       	sbiw	r30, 0x00	; 0
 9c4:	09 f0       	breq	.+2      	; 0x9c8 <realloc+0x11e>
 9c6:	bb cf       	rjmp	.-138    	; 0x93e <realloc+0x94>
 9c8:	40 0f       	add	r20, r16
 9ca:	51 1f       	adc	r21, r17
 9cc:	80 91 f2 01 	lds	r24, 0x01F2
 9d0:	90 91 f3 01 	lds	r25, 0x01F3
 9d4:	84 17       	cp	r24, r20
 9d6:	95 07       	cpc	r25, r21
 9d8:	e9 f4       	brne	.+58     	; 0xa14 <realloc+0x16a>
 9da:	c6 17       	cp	r28, r22
 9dc:	d7 07       	cpc	r29, r23
 9de:	d0 f4       	brcc	.+52     	; 0xa14 <realloc+0x16a>
 9e0:	20 91 77 01 	lds	r18, 0x0177
 9e4:	30 91 78 01 	lds	r19, 0x0178
 9e8:	21 15       	cp	r18, r1
 9ea:	31 05       	cpc	r19, r1
 9ec:	41 f4       	brne	.+16     	; 0x9fe <realloc+0x154>
 9ee:	2d b7       	in	r18, 0x3d	; 61
 9f0:	3e b7       	in	r19, 0x3e	; 62
 9f2:	80 91 73 01 	lds	r24, 0x0173
 9f6:	90 91 74 01 	lds	r25, 0x0174
 9fa:	28 1b       	sub	r18, r24
 9fc:	39 0b       	sbc	r19, r25
 9fe:	a2 16       	cp	r10, r18
 a00:	b3 06       	cpc	r11, r19
 a02:	c8 f4       	brcc	.+50     	; 0xa36 <realloc+0x18c>
 a04:	b0 92 f3 01 	sts	0x01F3, r11
 a08:	a0 92 f2 01 	sts	0x01F2, r10
 a0c:	e7 01       	movw	r28, r14
 a0e:	79 83       	std	Y+1, r23	; 0x01
 a10:	68 83       	st	Y, r22
 a12:	13 c0       	rjmp	.+38     	; 0xa3a <realloc+0x190>
 a14:	cb 01       	movw	r24, r22
 a16:	0e 94 50 03 	call	0x6a0	; 0x6a0 <malloc>
 a1a:	ec 01       	movw	r28, r24
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	59 f0       	breq	.+22     	; 0xa36 <realloc+0x18c>
 a20:	f7 01       	movw	r30, r14
 a22:	40 81       	ld	r20, Z
 a24:	51 81       	ldd	r21, Z+1	; 0x01
 a26:	b8 01       	movw	r22, r16
 a28:	0e 94 23 05 	call	0xa46	; 0xa46 <memcpy>
 a2c:	c8 01       	movw	r24, r16
 a2e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <free>
 a32:	8e 01       	movw	r16, r28
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <realloc+0x190>
 a36:	00 e0       	ldi	r16, 0x00	; 0
 a38:	10 e0       	ldi	r17, 0x00	; 0
 a3a:	c8 01       	movw	r24, r16
 a3c:	cd b7       	in	r28, 0x3d	; 61
 a3e:	de b7       	in	r29, 0x3e	; 62
 a40:	ec e0       	ldi	r30, 0x0C	; 12
 a42:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__epilogue_restores__+0xc>

00000a46 <memcpy>:
 a46:	fb 01       	movw	r30, r22
 a48:	dc 01       	movw	r26, r24
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <memcpy+0xa>
 a4c:	01 90       	ld	r0, Z+
 a4e:	0d 92       	st	X+, r0
 a50:	41 50       	subi	r20, 0x01	; 1
 a52:	50 40       	sbci	r21, 0x00	; 0
 a54:	d8 f7       	brcc	.-10     	; 0xa4c <memcpy+0x6>
 a56:	08 95       	ret

00000a58 <__prologue_saves__>:
 a58:	2f 92       	push	r2
 a5a:	3f 92       	push	r3
 a5c:	4f 92       	push	r4
 a5e:	5f 92       	push	r5
 a60:	6f 92       	push	r6
 a62:	7f 92       	push	r7
 a64:	8f 92       	push	r8
 a66:	9f 92       	push	r9
 a68:	af 92       	push	r10
 a6a:	bf 92       	push	r11
 a6c:	cf 92       	push	r12
 a6e:	df 92       	push	r13
 a70:	ef 92       	push	r14
 a72:	ff 92       	push	r15
 a74:	0f 93       	push	r16
 a76:	1f 93       	push	r17
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	cd b7       	in	r28, 0x3d	; 61
 a7e:	de b7       	in	r29, 0x3e	; 62
 a80:	ca 1b       	sub	r28, r26
 a82:	db 0b       	sbc	r29, r27
 a84:	0f b6       	in	r0, 0x3f	; 63
 a86:	f8 94       	cli
 a88:	de bf       	out	0x3e, r29	; 62
 a8a:	0f be       	out	0x3f, r0	; 63
 a8c:	cd bf       	out	0x3d, r28	; 61
 a8e:	09 94       	ijmp

00000a90 <__epilogue_restores__>:
 a90:	2a 88       	ldd	r2, Y+18	; 0x12
 a92:	39 88       	ldd	r3, Y+17	; 0x11
 a94:	48 88       	ldd	r4, Y+16	; 0x10
 a96:	5f 84       	ldd	r5, Y+15	; 0x0f
 a98:	6e 84       	ldd	r6, Y+14	; 0x0e
 a9a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a9c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a9e:	9b 84       	ldd	r9, Y+11	; 0x0b
 aa0:	aa 84       	ldd	r10, Y+10	; 0x0a
 aa2:	b9 84       	ldd	r11, Y+9	; 0x09
 aa4:	c8 84       	ldd	r12, Y+8	; 0x08
 aa6:	df 80       	ldd	r13, Y+7	; 0x07
 aa8:	ee 80       	ldd	r14, Y+6	; 0x06
 aaa:	fd 80       	ldd	r15, Y+5	; 0x05
 aac:	0c 81       	ldd	r16, Y+4	; 0x04
 aae:	1b 81       	ldd	r17, Y+3	; 0x03
 ab0:	aa 81       	ldd	r26, Y+2	; 0x02
 ab2:	b9 81       	ldd	r27, Y+1	; 0x01
 ab4:	ce 0f       	add	r28, r30
 ab6:	d1 1d       	adc	r29, r1
 ab8:	0f b6       	in	r0, 0x3f	; 63
 aba:	f8 94       	cli
 abc:	de bf       	out	0x3e, r29	; 62
 abe:	0f be       	out	0x3f, r0	; 63
 ac0:	cd bf       	out	0x3d, r28	; 61
 ac2:	ed 01       	movw	r28, r26
 ac4:	08 95       	ret

00000ac6 <_exit>:
 ac6:	f8 94       	cli

00000ac8 <__stop_program>:
 ac8:	ff cf       	rjmp	.-2      	; 0xac8 <__stop_program>
